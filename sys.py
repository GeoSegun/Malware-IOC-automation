import pandas as pd
import numpy as np
from pandas import DataFrame as df
import requests


file = ('workdata.csv') #Path to the file
virustotal_key = '099466529d16f11466dce0ba24a3448a2dc2a39292e42207c0ed4dd6b045dbf3'
dt = pd.read_csv(file, header=None)
dt.columns = ['sn', 'Values', 'IOCs']  #Give the dataframe a title

dt = dt.drop(['sn'], axis=1) #This is used to drop the first column and update the dataframe

dt = dt.iloc[:,[1,0]] #Rearranging the column

dt['Values'] = dt['Values'].astype(str)

# Create the unique value columns
for unique_type in dt['IOCs'].unique():
    dt[unique_type] = dt[dt['IOCs'] == unique_type]['Values']

# Drop the original 'value' and 'type' columns
dt = dt.drop(['Values', 'IOCs'], axis=1)

# Replace NaN values with None
dt = dt.where((pd.notnull(dt)), None)
dt.fillna("", inplace=True)

# create a new DataFrame to store the results
new_data = {'FILEHASH-MD5': [], 'FILEHASH-sha-1': [], 'FILEHASH-sha-256': []}
new_df = pd.DataFrame(new_data)

# loop through each element in the third column
for hash in dt['Hash']:
    if len(hash) == 32:
        new_df = new_df.append({'FILEHASH-MD5': hash}, ignore_index=True)
    elif len(hash) == 42:
        new_df = new_df.append({'FILEHASH-sha-1': hash}, ignore_index=True)
    elif len(hash) == 64:
        new_df = new_df.append({'FILEHASH-sha-256': hash}, ignore_index=True)

dt.drop(['Hash'], axis=1)
# Concatenate the two dataframes
result = pd.concat([dt, new_df], axis=1)
final = result.drop(['Hash'], axis=1) #used to drop the Hash column

col= final.columns[::-1]
final= final[col]

def find_malicious_ips(final, api_key):
    if 'IP Address' not in final.columns or final['IP Address'].empty:
        print('No IP addresses found in Excel file. Exiting...')
        return pd.DataFrame(columns=["IP Address"])
    else:
        # Set up the VirusTotal API endpoint
        url = 'https://www.virustotal.com/api/v3/ip_addresses/'

        # Create an empty DataFrame to hold the malicious IP addresses
        malicious_ips_df = pd.DataFrame(columns=['IP Address'])

        # Loop through each IP address in the DataFrame
        for ip in final['IP Address']:
            try:
                # Make a GET request to the VirusTotal API endpoint for the IP address
                headers = {'x-apikey': api_key}
                response = requests.get(url + ip, headers=headers)

                # Check if the IP address has been reported as malicious
                json_data = response.json()
                if 'data' in json_data and 'attributes' in json_data['data']:
                    attributes = json_data['data']['attributes']
                    if 'last_analysis_stats' in attributes and attributes['last_analysis_stats']['malicious'] > 0:
                        # Add the malicious IP address to the DataFrame
                        malicious_ips_df = malicious_ips_df.append({'IP Address': ip}, ignore_index=True)
            except Exception as e:
                # If there's an error, skip the IP address
                print(f'Error checking IP address {ip}: {e}')
                continue

        # Print the resulting DataFrame of malicious IP addresses
        if malicious_ips_df.empty:
            print('No malicious IP addresses found.')
        else:
            print('Malicious IP addresses found:')
            #print(malicious_ips_df)
        
        return malicious_ips_df
api_key = virustotal_key
malicious_ips_df = find_malicious_ips(final, api_key)

# Set up the VirusTotal API endpoint and parameters
url = 'https://www.virustotal.com/api/v3/intelligence/search'
headers = {'x-apikey': virustotal_key}
params = {'query': 'url:'}

# Check if the DataFrame has any URLs
if 'Url' not in final.columns or final['Url'].empty:
    print('No URLs found in Excel file. Exiting...')
    malicious_url_df = pd.DataFrame(columns=["Url"])
else:
    # Create an empty DataFrame to hold the malicious URLs
    malicious_url_df = pd.DataFrame(columns=['Url', 'Malicious'])

    # Loop through each URL in the DataFrame
    for url in final['Url']:
        try:
            # Search for the URL in VirusTotal
            response = requests.get(url=url, headers=headers, params=params)

            # Check if the URL has been associated with any known malicious activity
            if response.json()['data']:
                # Add the malicious URL to the DataFrame
                malicious_url_df = malicious_url_df.append({'Url': url, 'Malicious': True}, ignore_index=True)
            else:
                # If the URL is not malicious, still add it to the DataFrame with a False flag
                malicious_url_df = malicious_url_df.append({'Url': url, 'Malicious': False}, ignore_index=True)
        except Exception as e:
            # If there's an error, skip the URL
            print(f'Error checking URL {url}: {e}')
            continue

    # Print the resulting DataFrame of malicious URLs
    if malicious_url_df.empty:
      #if no malicious IP were found, still create an empty an Empty dataframe with the "Url" as title
        
        # If no malicious URLs were found, print a message
        print('No malicious URLs found.')
    else:
        print('Malicious URLs found:')
        print(malicious_url_df)

# Check if the DataFrame has any domains
if 'Domain' not in final.columns or final['Domain'].empty:
    print('No domains found in Excel file. Exiting...')
    malicious_domain_df = pd.DataFrame(columns=["Domain"])
else:
    # Set up the VirusTotal API endpoint and API key
    url = 'https://www.virustotal.com/api/v3/domains/'
    api_key = virustotal_key

    # Create an empty DataFrame to hold the malicious domains
    malicious_domains_df = pd.DataFrame(columns=['Domain'])

    # Loop through each domain in the DataFrame
    for domain in final['Domain']:
        try:
            # Make a GET request to the VirusTotal API endpoint for the domain
            headers = {'x-apikey': api_key}
            response = requests.get(url + domain, headers=headers)

            # Check if the domain has been reported as malicious
            json_data = response.json()
            if 'data' in json_data and 'attributes' in json_data['data']:
                attributes = json_data['data']['attributes']
                if 'last_analysis_stats' in attributes and attributes['last_analysis_stats']['malicious'] > 0:
                    # Add the malicious domain to the DataFrame
                    malicious_domains_df = malicious_domains_df.append({'Domain': domain}, ignore_index=True)
        except Exception as e:
            # If there's an error, skip the domain
            print(f'Error checking domain {domain}: {e}')
            continue

    # Print the resulting DataFrame of malicious domains
    if malicious_domains_df.empty:
        print('No malicious domains found.')
    else:
        print('Malicious domains found:')
        print(malicious_domains_df)

def get_malicious_emails(final, virustotal_key):
    # Check if the DataFrame has any email addresses
    if 'Email Address' not in final.columns or final['Email Address'].empty:
        print('No email addresses found in Excel file. Exiting...')
        return pd.DataFrame(columns=["Email Address"])

    # Set up the VirusTotal API endpoint and parameters
    url = 'https://www.virustotal.com/api/v3/intelligence/search'
    headers = {'x-apikey': virustotal_key}
    params = {'query': 'email:'}

    # Create an empty DataFrame to hold the malicious email addresses
    malicious_email_df = pd.DataFrame(columns=['Email Address'])

    # Loop through each email address in the DataFrame
    for email in final['Email Address']:
        try:
            # Search for the email address in VirusTotal
            response = requests.get(url + params['query'] + email, headers=headers)

            # Check if the response contains any data
            if 'data' in response.json() and response.json()['data']:
                # Add the malicious email address to the DataFrame
                malicious_email_df = malicious_email_df.append({'Email Address': email}, ignore_index=True)
        except Exception as e:
            # If there's an error, skip the email address
            print(f'Error checking email address {email}: {e}')
            continue

    # Print the resulting DataFrame of malicious email addresses
    if malicious_email_df.empty:
        print('No malicious email addresses found.')
    else:
        print('Malicious email addresses found:')
        print(malicious_email_df)

    return malicious_email_df

api_key = virustotal_key
malicious_email_df = get_malicious_emails(final, virustotal_key)

t = final.iloc[:, :3]

#This Joined all the tables created
comp= pd.concat([t, malicious_ips_df, malicious_url_df, malicious_domains_df, malicious_email_df], axis=1)

comp.to_csv('malware.csv', index=False)

